Be a Good Listener and Reader✌️

(1) Why you need a software?
--> Suppose there is one person who work in finance on the basis of returns, policy, funds and for these he / she have to do calculations and somethings it gets wrong with it. So, we suggest him to buy one computer because it can do every type of calculations, like softwares use for editing the photo is Photoshop.
    we can listen any song using spotify or other softwares.Computer can perform to its potential to do any work at one time doing 100 to 1000 works because it runs on different softwares. and this person want one new software as the current situation is don't have a software. So, we develop one new software for it's work and computer can only understand Binary language.
    It is also known as Machine language.And the person don't know this langauage and hence communication doesn't happeens with computers. We develop one software and develop one tricks to perform calculations a set of intructions for the computer to perform the steps.
    And we give the file to that person and the person now can calculate premium by the set of instructions it has in the computer by the file installed in it.

(2) Machine code:
    --> Computer has one important resource is Processor.
    -It has Memory unit, control unit, Arithmetic logical Unit.
    - Then, introduced RAM it can perform various task with it's intructions.
    - And also Cache it is intermediate 
    -Software is present is in the form of a file which is executable as (.exe)
    - Machine code is a binary code. It is platform Dependent.
    The tangible part of the system is Hardware. To use the hardware for allocation, memory and many more for the utilization, file and process management and all these is come into Kernel that how to us hardware. and all other task also combination of both is known as OS.
    OS => Kernel + Task. And in today's generation also present GUI.
    -The software which are present in our computer is .exe file that is understandable language then it will be process to OS. Then, it will read the instruction and pass it to the Hardware.

(3) How to build a software using C/C++
    --> In today generation we have to learn language like C, C++, java, Python, Javascript, etc.
    Instead of .exe we will build according to the extensions Like in C it goes as .C => Source file
    One is Pre-processor, Compiler and Linker is use to build Software.
    > From .C file to .exe it requires build by the program like Pre-processor reads the files and makes some changes then pass to Compiler then translate the code making it object file and passing it to Linker then uses library code + object file makes the .exe file that is a Software.
    --> (1) Create a source file, (2) build the software From Install the preprocessor, Compiler and Linker. (3) Download and Install the Software


Agenda: (1)IDE, (2) Download and Install, (3) Verify Installation

(1) Integrated Development Environment:
    --> We have many features, tools so that with the help of these integrated tools are present at one place to use it to build Softwares.
    - For using preprocessor, compiler and linker we need some commands. Example: CMD
    - And by using IDE we can use more features as it is a beginner friendly.
    - The turbo c3 was built in the year 1980's and it is of 16 bit and after 40 years we are using advanced IDE instead of this use Codeblocks, VS Code, etc.
    - In every IDE there is source code, build tools, Debugging Tools.

    *Installation: 
        (1) Codeblocks: 
                        - Link: codeblocks.org, downloads-> Download the binary release, For windows, linus, mac os.
        (2) Vs Code: 
                - Download VS Code editor
                - MINGw: mingw compiler,
                         Sourceforge.net/projects/Mingw-64
                         Download and Install

                - Extensions: (1) C/C++ Intelliscence,
                              (2) Code Runner
                - File: ->Preference->Settings
                        -> Extensions
                        -> Run Code COnfiguration
                                Run in terminal ☑️

                        --> Preference- settings - Extensions - Run code configuration - Run in terminal


History of C :
    (1) Multics,
    (2) Evolution of C Language
    (3) Version History

        (1) Multics:
            -Multiplexed Information and computing services.
            - It is an OS
            - Planning and development started in 1964.
            - Initially it was a cooperative project led by MIT and AT&T'S BELL Laboratory.
            - It was developed on the GE645 computer.

            *AT&T'S BELL Laboratory:
                - American Telephone and Telegraph 
                - Alexander Graham BELL
                - Was founded in 1885
                - 9 Nobel prizes have been awarded at the bell lab for work completion.
                - Languages developed at bell labs:
                    => B, C, C++, S, SNOBOL, AWk, AMPL
                - It was acquired by NOKIA in 2016.

            *BELL Labs Pulled Out of Multics:
                - Bell labs pulled out of the project in 1969.
                - Ken Thompson and Dennis Ritchie were their on Multics project from AT&T'S 
                - Ken Thompson decided to build his own OS.
                - BCPL => Basic Command Programming Language.
                - Ken Thompson derived a new language from BCPL known as B language (as an honour or respect towards Martin richards) and developed in the year 1969.

            (2) Evolution of C Language:
                - Denis Ritchie friend of Ken Thompson developed the compiled programming language C as a replacement for the interpreted language B.
                - UNIX operating operating system was written in B Language and then rewritten in C language. 
                - C has consistently ranked amongst the top two languages in TIOBE Index.
                    (A measure of a popularity of a programming language.)


            (3) Version History of C:
                - K&R Version (V1.0) => 1978 [in today's generation we think as x=-5 as x has stored the value but at that time it was about x = x-5 as a operator and to overcome this they got the version as operator x-=5.]
                - ANSI C => 
                - C89
                - C90
                - C95
                - C99 => 1999- Major release of C language where single line comment was introduced, Variable language array.
                - C11 => 2011 - gets() to Fgets() was introduced.
                - C17 => 2018 - Only bug fixes.



                How to compile & run: Open terminal and write gcc hyphine(-) std = c11(version of c) file name then file name with extensions and then compiled ./file name
                    gcc -std=c11 -o first first.c
                    ./filename


* Tokens, Data Types and Variable Declaration: 

    (1) Tokens: 
        - It is generally known as words
        (A) what are tokens?
            - It is also known as lexical Elements
            - The text of C/C++ program consists of tokens and whitespace.
            - the token is the smallest element of a C/C++ program that is meaningful to the compiler.
            - Parser is a program whose job is to seperate these tokens.

                    * parser recognizes these type of tokens:
                            - Constants (Literals)
                            - Identifiers (Variables, Functions ....)
                            - Keywords
                            - Operators
                            - Punctuators

                            int a = 5; (int is a keyword, a is a variable or identifier, = is a operator, 5 is a constant and ";" is a punctuator.)
                            ._Token1_._token2_._token3_._token4_._ ......

                            Whitespaces: 
                                - tokens are usually seperated by white spaces, which can be one or more.
                                    - Blanks (single or more blanks)
                                    - Tabs (Tabs)
                                    - New lines(new line from the cursor)
                                    - Form Feed(vertically same column it goes below at the same position)
                                    - Comments (Comments are text ignored by the compiler and it is for Developers i.e. Humans.)
                                        => Comments are useful for documentation of your code and useful for programmers.
                                        => There are two types of comments:
                                                (1) Single Line Comments(//),
                                                (2) Multiline Comments(/* _______ */)


                                                Sample program in C:
                                                    operators, punctuators, constants, Identifiers, keywords, comments

                                                        int main(){
                                                            int a,b,c; //Variables
                                                            printf("Enter two numbers:");
                                                            scanf("%d %d", &a,&b);
                                                            c=a+b;
                                                            printf("Sum is %d", c);

                                                        }
                                                            /* main function body ends here */

                                                        * NOTE:    We first  do source file (.c) then it requires the building of softwares are preprocessor(.c and a file which it doesn't read it includes the "#" only into the file i.e. it's reads and converts "#"), compiler (it reads the C file --> converts into Machine code. And this code stored in the object file which is made by compiler consisting of machine code. But, this machine code can't run now it includes linker now. ) and linker() and then .exe executable file.
                    
                    

        (B) Constants: 
            - What is the purpose of making a program?
                => To process data or Information.
                   example: To convert a unit program we will need to practice some maths on data and practice it.
                     
                     Data = Constant = Information.
                     (Data can be of anything like transactions, contacts, ATM )

                        In maths, all numbers are real numbers and integers are subsets of real numbers. But let's see it in the world of programming!

                        In programming world we have two types of constant:
                            (A)Primary Constants, (B) Secondary Constants
                                (A) Primary Constants: 1. Integer, 2. Real, 3. Character
                                        1. Integer:
                                                - Integer constants are negative, positive, Zero numbers they all are Integers.
                                                - 35, 0, -2
                                                - Eg: Family members, mobile numbers
                                        2. Real:
                                                - Real numbers are the one where point is present. This means it isn't float please understand we will read it 
                                                - 3.5, -0.05, 2.0
                                                - Eg: Mobile balance
                                        3. Character:
                                                - Any symbol ('___') can (**can be) can be a character constant.
                                                - Here, single quote is an indication 
                                                - Digit(5,3,2) with a single quote is known as Character Constant
                                                - 'A' , 'a' , '+' , '3', '  ' , '@'
                                                - Not a character constants are '3.4' , '-5'
                                                - Special or exceptional character: '\n'
                                                - Eg: Grades,

                                (B)Secondary Constant:
                                        1. Pointers:
                                        2. Arrays
                                        3. String (Sequence of characters)
                                        4. Structure
                                        5. Union
                                        6. Enumerator


        (C) Variables: 
                --> Every .exe file can be store in HDD or SDD and it is permanent memory device.
                - where, ram is also a memory device and it is volatile.
                - Processor consist of MU(Memory Unit: It consist of the registers), Control unit(CU: It reads the register instructions), ALU(Arithmetical Logical Unit gets signal to do task.)
                - Variables are the memory location which stores the data during the execution of the program.
                - Variables name is any combination of (A to Z or a to z), digits(0 to 9) and underscore(_).
                - No other symbol is allowed.
                - Valid variable number cannot start from a digit.
                - Variable name cannot be a keyword.

                    --> C language is a case sensitive language.
        (D) Keywords: 
                - It is a predefined or reserved word which is known by compiler 
                - auto, break,case,if,else,char,const,continue,default,do,double,enum,extern,float,for,goto,int,long,register,return,short,signed,sizeof,static,struct,switch,typedef,union,unsigned,void,volatile,while --> C89(1989) 32 keywords. C99 (+5) --> _bool,_comlex,_Imaginary, _inline, _restrict. C11(+7) --> _Alignas, _Alignof, _Atomic, _Generic, _noreturn, _static_assert, _Thread_Local.

        (E) Comments:


    (2) Data Types and variable Declaration:

            (A) Why classification of data?
            --> 
                - When we create and run program it goes to RAM where we perform and store dat in the form of a variable. and this memory location will occupy some data.
                - The more data we get as input in the size of small or big it will require some space or data size or memory   and if it is big it will take some time to process.
                - The execution is fast in C and C++ (The data ko dekhkar runtime mae input decide karenge then to store the data to where to keep the data which will increase the time for execution: was rejected)
                - Eg: 5, 426, 12847589
                - when user inputs the data then only we will know how much memory is necessary in run time.
                - C language uses the second method to know how much space will be required to store for the input data during the compilation time and it will get the data at the output depending upon the number of size of data will get from the compiled time 

                => .Different data requires different ways of handling the data in computer.
                    Factor responsible for data classifications:
                        -->Memory size requires to store the data.
                        -->Method to conert data into binary for internal representation.
                        --> Kind of operations performed on data.

            (B) Data types:
                1 Byte = 8 bits
                --> Char, Int, Float, Double, void
                    - Int : Any variable of int data type consist of 4 byte.
                    - Char: Any variable of char data type consist of 1 byte.
                    - float: any variable of float data type consist of 4 bytes.
                    - Double: Any variable of Double data types consist of 8 bytes. 
                
            (C) Variable Declarations:
                --> TO perform some task like addition, subtractions, multiplications,etc. we will have to declare the variable.
                - Which type of data to be store in it then only it will know how much data will require and it will help by data types.
                - int a,b;(data type declration variable.) a📦 4 bytes, b📦4 bytes [a=5,b=7]
                  char c; c📦 1 byte('A')
                  float d; d📦4 bytes(2.5)
                  double e; e📦 8 bytes (uninitialized variable garbage value is present.)

                    --> The value which at the initial don't have a or assigned a value it is uninitialized variable.
                    - And there is some value present in it which is garbage value.
                    - Variable is the one which changes the value again from the data.


            (D) ASCII:
                    - Suppose we have char m = 'A' and the variable changes the data into binary.
                    But the data present here is the character constant. So, new technique introduced to convert the character constant data into binary data as CHARACTER ENCODING TECHNIQUE.
                    - It can handle 256 character starting from 0 it will consist of 255.
                    - Fullform American Standard Code for Information Interchange.
                    - '0'=48, '1'=49, '2'=50,... 'A' = 65, 'B' = 66,.. 'Z' =90, 'a'=97,'z' =122, 'space' = 32 and every symbols consist of a code
                    - 65: 01000001, 
                    - ASCII charaacter consst of single quote and code doesn't because it is a code 😂
                    - Difference in the size of the memory according to the data types of bits.
                    - Int a = 'A' (A=65 value) or Int a = 65
            (E) Float vs double:
                    - It is a real constant value.
                    - Float:
                            => It is a single precision.
                            - It consist of 4 bytes.
                    - Double :
                            => It is a double precision.
                            - It consist of 8 bytes.
                            - 0.7:
                                    - 0.7 * 2= 1.4 --> Consider 1 (the number between o and 1 is fractional value and because of this we have to consider before point ).
                                    0.4 (fractional value remaining) *2 = 0.8 --> consider 0
                                    0.8(Fractional value remaining) *2 = 1.6 --> consider 1
                                    0.6 (fractional value) *2 = 1.2 --> consider 1
                                    0.2(Fractional value) *2 = 0.4 --> consider 0
                                    (REPEATATIOn)
                                    0.4(fractional value) *2= 0.8 --> consider 0
                                    0.8(Fractional value) *2 = 1.6 --> consider 1
                                    0.6(fractional value)*2 = 1.2 --> consider 1
                                    0.2(Fractional value) *2 = 0.4 --> consider 0
                                    (REPETATION)
                                    0.4(Fractional value) *2= 0.8 --> consider 0
                                    0.8(fractional value) *2= 1.6 --> consider 1
                                    0.6(Fractional value) *2 = 1.2 --> consider 1
                                    0.2(Fractional value) *2 = 0.4 --> consider 0
                                    0.4(Fractional value) *2 = 0
                                    (REPETATION...)

                                    0.7 => Binary form can be : 0.1011001100......(infinite)

                                    - And to represent the notation for (0.some binary numbers..) they introduced with two types of notations:
                                    (A) Fixed Point Notation,
                                    (B) Variable or Floating point Notation


* Input, Output Instructions in C:
    (1) About C Language:
            -->
                - (1) C is a block structured programming language.(from open curly bracket to curly bracket close is known as block and we code in this block and like this many blocks )
                - (2) A C program can have many blocks according to the utility.
                - (3) Usually(Kabhi-Kabhi) outermost blocks are called functions.(Identifiers: Variables, functions,etc.)
                - (4) Functions has some name for Identification [as f1()] rules: alphabets, digits, underscore.
                - (5) Even the smallest program has one function.
                - (6) All functions name must be different.
                - (7) If there is only one function it's name be main()
                - (8) If there are more than one functions present in a program then also one function name must be main().
                        => Program have two declaration statement: (1) Declarative Statement : It is written for compiler to give how many space or memory or any work it does it will do. It isn;t a executive functions.
                                                                    (2) Action statements: It is the executive statement. 
                - (9) U can write declaration statements inside a block (Locally: The declaration statement can be only written inside the block where it is assign and known as local variable and local declaration.) and outide the block(Globally: The declaration statement can be written everywhere in the program in the outer and inside the functions. And also known as Global variable and global declaration. )
                - (10) Local Variable VS Global variable.
                - (11) Action statement resides only inside the blocks(functions)[i.e. Local variablem]
                - (12) C is a case sensitive language.


                * Standard Input & Output Devices:
                    --> The directional flow of data from the software to the user is output. Eg: ATM Message of inserting a card it is coming for the user instruction.
                    --> The directional flow of data from the user input to the software is Input. Eg: The card swipping on an ATM card reader for the transactions it will read the data of the user and take it as a input.
                    Keyboard => Standard Input Device,
                    Monitor => Standard Output Device.
                    NOTE: Standard because it is generally present in most of the devices or computers.

                    Output Instruction:
                        --> Function is a block of code of the program.
                        --> We can make a function like:
                            f1(){
                                _______
                                _______
                                ________
                                code____
                            }
                            Defining a function by it's name and inside the block of open curly bracket and close curly bracte is code.
    (2) printf => Predefined function(already defined function)
            --> NOTE:  koi bhi functionke block mae likhe action statements tabh execute hotae hai jab iss function ko call kiya jata hai.
            --> Function call and function defining is different.
            => printf() function is used to print some text on the monitor.
                - printf("Hello");
            => printf():
                        (1) To print the text.
                        (2) To print the value of a variable or expression.
                        NOTE: You can call a function any number of times. But can define only once.
    (3) write your first program:
            #include<iostream>
            #include<conio.h>
            main(){
                printf("Welcome");
                return 0;
            }
            
    (4) Escape Sequence
    (5) Format specifiers
    (6) Scanf()





